// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0-devel
// 	protoc        v3.17.3
// source: crypto_delete_allowance.proto

package services

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

//*
// Deletes one or more hbar/token approved allowances from an owner's account. This operation
// will remove the allowances granted to <b>all</b> spenders of an owner's hbar, a specific
// fungible token and/or a specific non-fungible token serial number. Each owner account
// listed as wiping an allowance must sign the transaction.
type CryptoDeleteAllowanceTransactionBody struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//*
	// List of hbar allowances to remove.
	CryptoAllowances []*CryptoWipeAllowance `protobuf:"bytes,1,rep,name=cryptoAllowances,proto3" json:"cryptoAllowances,omitempty"`
	//*
	// List of non-fungible token allowances to remove.
	NftAllowances []*NftWipeAllowance `protobuf:"bytes,2,rep,name=nftAllowances,proto3" json:"nftAllowances,omitempty"`
	//*
	// List of fungible token allowances to remove.
	TokenAllowances []*TokenWipeAllowance `protobuf:"bytes,3,rep,name=tokenAllowances,proto3" json:"tokenAllowances,omitempty"`
}

func (x *CryptoDeleteAllowanceTransactionBody) Reset() {
	*x = CryptoDeleteAllowanceTransactionBody{}
	if protoimpl.UnsafeEnabled {
		mi := &file_crypto_delete_allowance_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CryptoDeleteAllowanceTransactionBody) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CryptoDeleteAllowanceTransactionBody) ProtoMessage() {}

func (x *CryptoDeleteAllowanceTransactionBody) ProtoReflect() protoreflect.Message {
	mi := &file_crypto_delete_allowance_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CryptoDeleteAllowanceTransactionBody.ProtoReflect.Descriptor instead.
func (*CryptoDeleteAllowanceTransactionBody) Descriptor() ([]byte, []int) {
	return file_crypto_delete_allowance_proto_rawDescGZIP(), []int{0}
}

func (x *CryptoDeleteAllowanceTransactionBody) GetCryptoAllowances() []*CryptoWipeAllowance {
	if x != nil {
		return x.CryptoAllowances
	}
	return nil
}

func (x *CryptoDeleteAllowanceTransactionBody) GetNftAllowances() []*NftWipeAllowance {
	if x != nil {
		return x.NftAllowances
	}
	return nil
}

func (x *CryptoDeleteAllowanceTransactionBody) GetTokenAllowances() []*TokenWipeAllowance {
	if x != nil {
		return x.TokenAllowances
	}
	return nil
}

//*
// Hbar allowances to be removed on an owner account
type CryptoWipeAllowance struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//*
	// The account ID of the hbar owner (ie. the grantor of the allowance).
	Owner *AccountID `protobuf:"bytes,1,opt,name=owner,proto3" json:"owner,omitempty"`
}

func (x *CryptoWipeAllowance) Reset() {
	*x = CryptoWipeAllowance{}
	if protoimpl.UnsafeEnabled {
		mi := &file_crypto_delete_allowance_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CryptoWipeAllowance) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CryptoWipeAllowance) ProtoMessage() {}

func (x *CryptoWipeAllowance) ProtoReflect() protoreflect.Message {
	mi := &file_crypto_delete_allowance_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CryptoWipeAllowance.ProtoReflect.Descriptor instead.
func (*CryptoWipeAllowance) Descriptor() ([]byte, []int) {
	return file_crypto_delete_allowance_proto_rawDescGZIP(), []int{1}
}

func (x *CryptoWipeAllowance) GetOwner() *AccountID {
	if x != nil {
		return x.Owner
	}
	return nil
}

//*
// Nft allowances to be removed on an owner account
type NftWipeAllowance struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//*
	// The token that the allowance pertains to.
	TokenId *TokenID `protobuf:"bytes,1,opt,name=token_id,json=tokenId,proto3" json:"token_id,omitempty"`
	//*
	// The account ID of the token owner (ie. the grantor of the allowance).
	Owner *AccountID `protobuf:"bytes,2,opt,name=owner,proto3" json:"owner,omitempty"`
	//*
	// The list of serial numbers to remove allowances from.
	SerialNumbers []int64 `protobuf:"varint,3,rep,packed,name=serial_numbers,json=serialNumbers,proto3" json:"serial_numbers,omitempty"`
}

func (x *NftWipeAllowance) Reset() {
	*x = NftWipeAllowance{}
	if protoimpl.UnsafeEnabled {
		mi := &file_crypto_delete_allowance_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NftWipeAllowance) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NftWipeAllowance) ProtoMessage() {}

func (x *NftWipeAllowance) ProtoReflect() protoreflect.Message {
	mi := &file_crypto_delete_allowance_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NftWipeAllowance.ProtoReflect.Descriptor instead.
func (*NftWipeAllowance) Descriptor() ([]byte, []int) {
	return file_crypto_delete_allowance_proto_rawDescGZIP(), []int{2}
}

func (x *NftWipeAllowance) GetTokenId() *TokenID {
	if x != nil {
		return x.TokenId
	}
	return nil
}

func (x *NftWipeAllowance) GetOwner() *AccountID {
	if x != nil {
		return x.Owner
	}
	return nil
}

func (x *NftWipeAllowance) GetSerialNumbers() []int64 {
	if x != nil {
		return x.SerialNumbers
	}
	return nil
}

//*
// Token allowances to be removed on an owner account
type TokenWipeAllowance struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//*
	// The token that the allowance pertains to.
	TokenId *TokenID `protobuf:"bytes,1,opt,name=token_id,json=tokenId,proto3" json:"token_id,omitempty"`
	//*
	// The account ID of the token owner (ie. the grantor of the allowance).
	Owner *AccountID `protobuf:"bytes,2,opt,name=owner,proto3" json:"owner,omitempty"`
}

func (x *TokenWipeAllowance) Reset() {
	*x = TokenWipeAllowance{}
	if protoimpl.UnsafeEnabled {
		mi := &file_crypto_delete_allowance_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TokenWipeAllowance) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TokenWipeAllowance) ProtoMessage() {}

func (x *TokenWipeAllowance) ProtoReflect() protoreflect.Message {
	mi := &file_crypto_delete_allowance_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TokenWipeAllowance.ProtoReflect.Descriptor instead.
func (*TokenWipeAllowance) Descriptor() ([]byte, []int) {
	return file_crypto_delete_allowance_proto_rawDescGZIP(), []int{3}
}

func (x *TokenWipeAllowance) GetTokenId() *TokenID {
	if x != nil {
		return x.TokenId
	}
	return nil
}

func (x *TokenWipeAllowance) GetOwner() *AccountID {
	if x != nil {
		return x.Owner
	}
	return nil
}

var File_crypto_delete_allowance_proto protoreflect.FileDescriptor

var file_crypto_delete_allowance_proto_rawDesc = []byte{
	0x0a, 0x1d, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x5f,
	0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x05, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x11, 0x62, 0x61, 0x73, 0x69, 0x63, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xf2, 0x01, 0x0a, 0x24, 0x43, 0x72,
	0x79, 0x70, 0x74, 0x6f, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x61,
	0x6e, 0x63, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x6f,
	0x64, 0x79, 0x12, 0x46, 0x0a, 0x10, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x41, 0x6c, 0x6c, 0x6f,
	0x77, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x57, 0x69, 0x70, 0x65, 0x41,
	0x6c, 0x6c, 0x6f, 0x77, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x10, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f,
	0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x12, 0x3d, 0x0a, 0x0d, 0x6e, 0x66,
	0x74, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x17, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4e, 0x66, 0x74, 0x57, 0x69, 0x70,
	0x65, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x0d, 0x6e, 0x66, 0x74, 0x41,
	0x6c, 0x6c, 0x6f, 0x77, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x12, 0x43, 0x0a, 0x0f, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x57, 0x69, 0x70, 0x65, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x0f, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x22, 0x3d,
	0x0a, 0x13, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x57, 0x69, 0x70, 0x65, 0x41, 0x6c, 0x6c, 0x6f,
	0x77, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x26, 0x0a, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x52, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x22, 0x8c, 0x01,
	0x0a, 0x10, 0x4e, 0x66, 0x74, 0x57, 0x69, 0x70, 0x65, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x61, 0x6e,
	0x63, 0x65, 0x12, 0x29, 0x0a, 0x08, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x49, 0x44, 0x52, 0x07, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x64, 0x12, 0x26, 0x0a,
	0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x52, 0x05,
	0x6f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x5f,
	0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x03, 0x52, 0x0d, 0x73,
	0x65, 0x72, 0x69, 0x61, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x22, 0x67, 0x0a, 0x12,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x57, 0x69, 0x70, 0x65, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x61, 0x6e,
	0x63, 0x65, 0x12, 0x29, 0x0a, 0x08, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x49, 0x44, 0x52, 0x07, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x64, 0x12, 0x26, 0x0a,
	0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x52, 0x05,
	0x6f, 0x77, 0x6e, 0x65, 0x72, 0x42, 0x26, 0x0a, 0x22, 0x63, 0x6f, 0x6d, 0x2e, 0x68, 0x65, 0x64,
	0x65, 0x72, 0x61, 0x68, 0x61, 0x73, 0x68, 0x67, 0x72, 0x61, 0x70, 0x68, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x6a, 0x61, 0x76, 0x61, 0x50, 0x01, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_crypto_delete_allowance_proto_rawDescOnce sync.Once
	file_crypto_delete_allowance_proto_rawDescData = file_crypto_delete_allowance_proto_rawDesc
)

func file_crypto_delete_allowance_proto_rawDescGZIP() []byte {
	file_crypto_delete_allowance_proto_rawDescOnce.Do(func() {
		file_crypto_delete_allowance_proto_rawDescData = protoimpl.X.CompressGZIP(file_crypto_delete_allowance_proto_rawDescData)
	})
	return file_crypto_delete_allowance_proto_rawDescData
}

var file_crypto_delete_allowance_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_crypto_delete_allowance_proto_goTypes = []interface{}{
	(*CryptoDeleteAllowanceTransactionBody)(nil), // 0: proto.CryptoDeleteAllowanceTransactionBody
	(*CryptoWipeAllowance)(nil),                  // 1: proto.CryptoWipeAllowance
	(*NftWipeAllowance)(nil),                     // 2: proto.NftWipeAllowance
	(*TokenWipeAllowance)(nil),                   // 3: proto.TokenWipeAllowance
	(*AccountID)(nil),                            // 4: proto.AccountID
	(*TokenID)(nil),                              // 5: proto.TokenID
}
var file_crypto_delete_allowance_proto_depIdxs = []int32{
	1, // 0: proto.CryptoDeleteAllowanceTransactionBody.cryptoAllowances:type_name -> proto.CryptoWipeAllowance
	2, // 1: proto.CryptoDeleteAllowanceTransactionBody.nftAllowances:type_name -> proto.NftWipeAllowance
	3, // 2: proto.CryptoDeleteAllowanceTransactionBody.tokenAllowances:type_name -> proto.TokenWipeAllowance
	4, // 3: proto.CryptoWipeAllowance.owner:type_name -> proto.AccountID
	5, // 4: proto.NftWipeAllowance.token_id:type_name -> proto.TokenID
	4, // 5: proto.NftWipeAllowance.owner:type_name -> proto.AccountID
	5, // 6: proto.TokenWipeAllowance.token_id:type_name -> proto.TokenID
	4, // 7: proto.TokenWipeAllowance.owner:type_name -> proto.AccountID
	8, // [8:8] is the sub-list for method output_type
	8, // [8:8] is the sub-list for method input_type
	8, // [8:8] is the sub-list for extension type_name
	8, // [8:8] is the sub-list for extension extendee
	0, // [0:8] is the sub-list for field type_name
}

func init() { file_crypto_delete_allowance_proto_init() }
func file_crypto_delete_allowance_proto_init() {
	if File_crypto_delete_allowance_proto != nil {
		return
	}
	file_basic_types_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_crypto_delete_allowance_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CryptoDeleteAllowanceTransactionBody); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_crypto_delete_allowance_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CryptoWipeAllowance); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_crypto_delete_allowance_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NftWipeAllowance); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_crypto_delete_allowance_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TokenWipeAllowance); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_crypto_delete_allowance_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_crypto_delete_allowance_proto_goTypes,
		DependencyIndexes: file_crypto_delete_allowance_proto_depIdxs,
		MessageInfos:      file_crypto_delete_allowance_proto_msgTypes,
	}.Build()
	File_crypto_delete_allowance_proto = out.File
	file_crypto_delete_allowance_proto_rawDesc = nil
	file_crypto_delete_allowance_proto_goTypes = nil
	file_crypto_delete_allowance_proto_depIdxs = nil
}
