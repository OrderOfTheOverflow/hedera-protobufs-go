// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0-devel
// 	protoc        v3.17.3
// source: crypto_approve_allowance.proto

package services

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

//*
// Creates one or more hbar/token approved allowances <b>relative to the payer account of this
// transaction</b>. Each allowance grants a spender the right to transfer a pre-determined
// amount of the payer's hbar/token to any other account of the spender's choice.
//
// (So if account <tt>0.0.X</tt> pays for this transaction, then at consensus each spender
// account will have new allowances to spend hbar or tokens from <tt>0.0.X</tt>).
type CryptoApproveAllowanceTransactionBody struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//*
	// List of hbar allowances approved by the account owner.
	CryptoApproval []*CryptoApproveAllowanceTransactionBody_CryptoApproval `protobuf:"bytes,1,rep,name=cryptoApproval,proto3" json:"cryptoApproval,omitempty"`
	//*
	// List of token (fungible or non-fungible) allowances approved by the account owner.
	TokenApproval []*CryptoApproveAllowanceTransactionBody_TokenApproval `protobuf:"bytes,2,rep,name=tokenApproval,proto3" json:"tokenApproval,omitempty"`
}

func (x *CryptoApproveAllowanceTransactionBody) Reset() {
	*x = CryptoApproveAllowanceTransactionBody{}
	if protoimpl.UnsafeEnabled {
		mi := &file_crypto_approve_allowance_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CryptoApproveAllowanceTransactionBody) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CryptoApproveAllowanceTransactionBody) ProtoMessage() {}

func (x *CryptoApproveAllowanceTransactionBody) ProtoReflect() protoreflect.Message {
	mi := &file_crypto_approve_allowance_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CryptoApproveAllowanceTransactionBody.ProtoReflect.Descriptor instead.
func (*CryptoApproveAllowanceTransactionBody) Descriptor() ([]byte, []int) {
	return file_crypto_approve_allowance_proto_rawDescGZIP(), []int{0}
}

func (x *CryptoApproveAllowanceTransactionBody) GetCryptoApproval() []*CryptoApproveAllowanceTransactionBody_CryptoApproval {
	if x != nil {
		return x.CryptoApproval
	}
	return nil
}

func (x *CryptoApproveAllowanceTransactionBody) GetTokenApproval() []*CryptoApproveAllowanceTransactionBody_TokenApproval {
	if x != nil {
		return x.TokenApproval
	}
	return nil
}

type CryptoApproveAllowanceTransactionBody_CryptoApproval struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//*
	// The account ID of the spender of the hbar allowance.
	Spender *AccountID `protobuf:"bytes,1,opt,name=spender,proto3" json:"spender,omitempty"`
	//*
	// The amount of the spender's allowance in tinybars.
	Amount int64 `protobuf:"varint,2,opt,name=amount,proto3" json:"amount,omitempty"`
}

func (x *CryptoApproveAllowanceTransactionBody_CryptoApproval) Reset() {
	*x = CryptoApproveAllowanceTransactionBody_CryptoApproval{}
	if protoimpl.UnsafeEnabled {
		mi := &file_crypto_approve_allowance_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CryptoApproveAllowanceTransactionBody_CryptoApproval) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CryptoApproveAllowanceTransactionBody_CryptoApproval) ProtoMessage() {}

func (x *CryptoApproveAllowanceTransactionBody_CryptoApproval) ProtoReflect() protoreflect.Message {
	mi := &file_crypto_approve_allowance_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CryptoApproveAllowanceTransactionBody_CryptoApproval.ProtoReflect.Descriptor instead.
func (*CryptoApproveAllowanceTransactionBody_CryptoApproval) Descriptor() ([]byte, []int) {
	return file_crypto_approve_allowance_proto_rawDescGZIP(), []int{0, 0}
}

func (x *CryptoApproveAllowanceTransactionBody_CryptoApproval) GetSpender() *AccountID {
	if x != nil {
		return x.Spender
	}
	return nil
}

func (x *CryptoApproveAllowanceTransactionBody_CryptoApproval) GetAmount() int64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

type CryptoApproveAllowanceTransactionBody_TokenApproval struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//*
	// The token that the allowance pertains to.
	TokenId *TokenID `protobuf:"bytes,1,opt,name=tokenId,proto3" json:"tokenId,omitempty"`
	//*
	// The account ID of the token allowance spender.
	Spender *AccountID `protobuf:"bytes,2,opt,name=spender,proto3" json:"spender,omitempty"`
	// Types that are assignable to Allowance:
	//	*CryptoApproveAllowanceTransactionBody_TokenApproval_Amount
	//	*CryptoApproveAllowanceTransactionBody_TokenApproval_ApprovedForAll
	Allowance isCryptoApproveAllowanceTransactionBody_TokenApproval_Allowance `protobuf_oneof:"allowance"`
}

func (x *CryptoApproveAllowanceTransactionBody_TokenApproval) Reset() {
	*x = CryptoApproveAllowanceTransactionBody_TokenApproval{}
	if protoimpl.UnsafeEnabled {
		mi := &file_crypto_approve_allowance_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CryptoApproveAllowanceTransactionBody_TokenApproval) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CryptoApproveAllowanceTransactionBody_TokenApproval) ProtoMessage() {}

func (x *CryptoApproveAllowanceTransactionBody_TokenApproval) ProtoReflect() protoreflect.Message {
	mi := &file_crypto_approve_allowance_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CryptoApproveAllowanceTransactionBody_TokenApproval.ProtoReflect.Descriptor instead.
func (*CryptoApproveAllowanceTransactionBody_TokenApproval) Descriptor() ([]byte, []int) {
	return file_crypto_approve_allowance_proto_rawDescGZIP(), []int{0, 1}
}

func (x *CryptoApproveAllowanceTransactionBody_TokenApproval) GetTokenId() *TokenID {
	if x != nil {
		return x.TokenId
	}
	return nil
}

func (x *CryptoApproveAllowanceTransactionBody_TokenApproval) GetSpender() *AccountID {
	if x != nil {
		return x.Spender
	}
	return nil
}

func (m *CryptoApproveAllowanceTransactionBody_TokenApproval) GetAllowance() isCryptoApproveAllowanceTransactionBody_TokenApproval_Allowance {
	if m != nil {
		return m.Allowance
	}
	return nil
}

func (x *CryptoApproveAllowanceTransactionBody_TokenApproval) GetAmount() int64 {
	if x, ok := x.GetAllowance().(*CryptoApproveAllowanceTransactionBody_TokenApproval_Amount); ok {
		return x.Amount
	}
	return 0
}

func (x *CryptoApproveAllowanceTransactionBody_TokenApproval) GetApprovedForAll() bool {
	if x, ok := x.GetAllowance().(*CryptoApproveAllowanceTransactionBody_TokenApproval_ApprovedForAll); ok {
		return x.ApprovedForAll
	}
	return false
}

type isCryptoApproveAllowanceTransactionBody_TokenApproval_Allowance interface {
	isCryptoApproveAllowanceTransactionBody_TokenApproval_Allowance()
}

type CryptoApproveAllowanceTransactionBody_TokenApproval_Amount struct {
	//*
	// The amount of the spender's token allowance.
	Amount int64 `protobuf:"varint,3,opt,name=amount,proto3,oneof"`
}

type CryptoApproveAllowanceTransactionBody_TokenApproval_ApprovedForAll struct {
	//*
	// If true, the spender has access to all of the account owner's NFT instances (currently
	// owned and any in the future).
	ApprovedForAll bool `protobuf:"varint,4,opt,name=approvedForAll,proto3,oneof"`
}

func (*CryptoApproveAllowanceTransactionBody_TokenApproval_Amount) isCryptoApproveAllowanceTransactionBody_TokenApproval_Allowance() {
}

func (*CryptoApproveAllowanceTransactionBody_TokenApproval_ApprovedForAll) isCryptoApproveAllowanceTransactionBody_TokenApproval_Allowance() {
}

var File_crypto_approve_allowance_proto protoreflect.FileDescriptor

var file_crypto_approve_allowance_proto_rawDesc = []byte{
	0x0a, 0x1e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x5f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65,
	0x5f, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x05, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x11, 0x62, 0x61, 0x73, 0x69, 0x63, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xfd, 0x03, 0x0a, 0x25, 0x43,
	0x72, 0x79, 0x70, 0x74, 0x6f, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x41, 0x6c, 0x6c, 0x6f,
	0x77, 0x61, 0x6e, 0x63, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x42, 0x6f, 0x64, 0x79, 0x12, 0x63, 0x0a, 0x0e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x41, 0x70,
	0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x41, 0x70, 0x70, 0x72, 0x6f,
	0x76, 0x65, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x61, 0x6e, 0x63, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x6f, 0x64, 0x79, 0x2e, 0x43, 0x72, 0x79, 0x70, 0x74,
	0x6f, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x52, 0x0e, 0x63, 0x72, 0x79, 0x70, 0x74,
	0x6f, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x12, 0x60, 0x0a, 0x0d, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x3a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x41,
	0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x61, 0x6e, 0x63, 0x65, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x6f, 0x64, 0x79, 0x2e, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x52, 0x0d, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x1a, 0x54, 0x0a, 0x0e, 0x43,
	0x72, 0x79, 0x70, 0x74, 0x6f, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x12, 0x2a, 0x0a,
	0x07, 0x73, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44,
	0x52, 0x07, 0x73, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x1a, 0xb6, 0x01, 0x0a, 0x0d, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x41, 0x70, 0x70, 0x72, 0x6f,
	0x76, 0x61, 0x6c, 0x12, 0x28, 0x0a, 0x07, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x49, 0x44, 0x52, 0x07, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x64, 0x12, 0x2a, 0x0a,
	0x07, 0x73, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44,
	0x52, 0x07, 0x73, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x06, 0x61, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x48, 0x00, 0x52, 0x06, 0x61, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x28, 0x0a, 0x0e, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x64, 0x46,
	0x6f, 0x72, 0x41, 0x6c, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x0e, 0x61,
	0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x64, 0x46, 0x6f, 0x72, 0x41, 0x6c, 0x6c, 0x42, 0x0b, 0x0a,
	0x09, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x61, 0x6e, 0x63, 0x65, 0x42, 0x26, 0x0a, 0x22, 0x63, 0x6f,
	0x6d, 0x2e, 0x68, 0x65, 0x64, 0x65, 0x72, 0x61, 0x68, 0x61, 0x73, 0x68, 0x67, 0x72, 0x61, 0x70,
	0x68, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x6a, 0x61, 0x76, 0x61,
	0x50, 0x01, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_crypto_approve_allowance_proto_rawDescOnce sync.Once
	file_crypto_approve_allowance_proto_rawDescData = file_crypto_approve_allowance_proto_rawDesc
)

func file_crypto_approve_allowance_proto_rawDescGZIP() []byte {
	file_crypto_approve_allowance_proto_rawDescOnce.Do(func() {
		file_crypto_approve_allowance_proto_rawDescData = protoimpl.X.CompressGZIP(file_crypto_approve_allowance_proto_rawDescData)
	})
	return file_crypto_approve_allowance_proto_rawDescData
}

var file_crypto_approve_allowance_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_crypto_approve_allowance_proto_goTypes = []interface{}{
	(*CryptoApproveAllowanceTransactionBody)(nil),                // 0: proto.CryptoApproveAllowanceTransactionBody
	(*CryptoApproveAllowanceTransactionBody_CryptoApproval)(nil), // 1: proto.CryptoApproveAllowanceTransactionBody.CryptoApproval
	(*CryptoApproveAllowanceTransactionBody_TokenApproval)(nil),  // 2: proto.CryptoApproveAllowanceTransactionBody.TokenApproval
	(*AccountID)(nil), // 3: proto.AccountID
	(*TokenID)(nil),   // 4: proto.TokenID
}
var file_crypto_approve_allowance_proto_depIdxs = []int32{
	1, // 0: proto.CryptoApproveAllowanceTransactionBody.cryptoApproval:type_name -> proto.CryptoApproveAllowanceTransactionBody.CryptoApproval
	2, // 1: proto.CryptoApproveAllowanceTransactionBody.tokenApproval:type_name -> proto.CryptoApproveAllowanceTransactionBody.TokenApproval
	3, // 2: proto.CryptoApproveAllowanceTransactionBody.CryptoApproval.spender:type_name -> proto.AccountID
	4, // 3: proto.CryptoApproveAllowanceTransactionBody.TokenApproval.tokenId:type_name -> proto.TokenID
	3, // 4: proto.CryptoApproveAllowanceTransactionBody.TokenApproval.spender:type_name -> proto.AccountID
	5, // [5:5] is the sub-list for method output_type
	5, // [5:5] is the sub-list for method input_type
	5, // [5:5] is the sub-list for extension type_name
	5, // [5:5] is the sub-list for extension extendee
	0, // [0:5] is the sub-list for field type_name
}

func init() { file_crypto_approve_allowance_proto_init() }
func file_crypto_approve_allowance_proto_init() {
	if File_crypto_approve_allowance_proto != nil {
		return
	}
	file_basic_types_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_crypto_approve_allowance_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CryptoApproveAllowanceTransactionBody); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_crypto_approve_allowance_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CryptoApproveAllowanceTransactionBody_CryptoApproval); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_crypto_approve_allowance_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CryptoApproveAllowanceTransactionBody_TokenApproval); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_crypto_approve_allowance_proto_msgTypes[2].OneofWrappers = []interface{}{
		(*CryptoApproveAllowanceTransactionBody_TokenApproval_Amount)(nil),
		(*CryptoApproveAllowanceTransactionBody_TokenApproval_ApprovedForAll)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_crypto_approve_allowance_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_crypto_approve_allowance_proto_goTypes,
		DependencyIndexes: file_crypto_approve_allowance_proto_depIdxs,
		MessageInfos:      file_crypto_approve_allowance_proto_msgTypes,
	}.Build()
	File_crypto_approve_allowance_proto = out.File
	file_crypto_approve_allowance_proto_rawDesc = nil
	file_crypto_approve_allowance_proto_goTypes = nil
	file_crypto_approve_allowance_proto_depIdxs = nil
}
